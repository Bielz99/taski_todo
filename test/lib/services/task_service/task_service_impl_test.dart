import 'package:flutter_test/flutter_test.dart';import 'package:mocktail/mocktail.dart';import 'package:taski_todo/models/task_model.dart';import 'package:taski_todo/repositories/task_repository/task_repository.dart';import 'package:taski_todo/services/task_service/task_service_impl.dart';class MockTaskRepository extends Mock implements TaskRepository {}void main() {  late TaskServiceImpl taskService;  late MockTaskRepository mockTaskRepository;  setUp(() {    mockTaskRepository = MockTaskRepository();    taskService = TaskServiceImpl(repository: mockTaskRepository);  });  group('TaskServiceImpl Tests', () {    final task = Task(      id: 1,      title: 'Test Task',      subtitle: 'This is a test task',      isChecked: false,    );    test('addTask should return the task id', () async {      when(() => mockTaskRepository.insertTask(task))          .thenAnswer((_) async => 1);      final result = await taskService.addTask(task);      expect(result, 1);      verify(() => mockTaskRepository.insertTask(task)).called(1);    });    test('fetchTasks should return a list of tasks', () async {      when(() => mockTaskRepository.getTasks()).thenAnswer((_) async => [task]);      final result = await taskService.fetchTasks();      expect(result, [task]);      verify(() => mockTaskRepository.getTasks()).called(1);    });    test('updateTask should return the number of rows affected', () async {      when(() => mockTaskRepository.updateTask(task))          .thenAnswer((_) async => 1);      final result = await taskService.updateTask(task);      expect(result, 1);      verify(() => mockTaskRepository.updateTask(task)).called(1);    });    test('deleteTask should return the number of rows affected', () async {      when(() => mockTaskRepository.deleteTask(1)).thenAnswer((_) async => 1);      final result = await taskService.deleteTask(1);      expect(result, 1);      verify(() => mockTaskRepository.deleteTask(1)).called(1);    });    test('searchTasks should return a filtered list of tasks', () async {      final tasks = [        Task(id: 1, title: 'Task 1', subtitle: 'Subtitle 1', isChecked: false),        Task(id: 2, title: 'Task 2', subtitle: 'Subtitle 2', isChecked: true),      ];      when(() => mockTaskRepository.getTasks()).thenAnswer((_) async => tasks);      final result = await taskService.searchTasks('Task 1');      expect(result, [tasks[0]]);      verify(() => mockTaskRepository.getTasks()).called(1);    });    test('getCompletedTasks should return a list of completed tasks', () async {      final tasks = [        Task(id: 1, title: 'Task 1', subtitle: 'Subtitle 1', isChecked: true),        Task(id: 2, title: 'Task 2', subtitle: 'Subtitle 2', isChecked: false),      ];      when(() => mockTaskRepository.getCompletedTasks())          .thenAnswer((_) async => [tasks[0]]);      final result = await taskService.getCompletedTasks();      expect(result, [tasks[0]]);      verify(() => mockTaskRepository.getCompletedTasks()).called(1);    });    test('getPendingTasks should return a list of pending tasks', () async {      final tasks = [        Task(id: 1, title: 'Task 1', subtitle: 'Subtitle 1', isChecked: false),        Task(id: 2, title: 'Task 2', subtitle: 'Subtitle 2', isChecked: true),      ];      when(() => mockTaskRepository.getPendingTasks())          .thenAnswer((_) async => [tasks[0]]);      final result = await taskService.getPendingTasks();      expect(result, [tasks[0]]);      verify(() => mockTaskRepository.getPendingTasks()).called(1);    });    test('deleteAllTasks should return the number of rows affected', () async {      when(() => mockTaskRepository.deleteAllTasks())          .thenAnswer((_) async => 2);      final result = await taskService.deleteAllTasks();      expect(result, 2);      verify(() => mockTaskRepository.deleteAllTasks()).called(1);    });  });}